// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  //
  email          String       @unique
  hashedPassword String?
  role           UserRoleEnum @default(USER)
  firstName      String?
  lastName       String?
  phone          String?

  tokens        Token[]
  sessions      Session[]
  projects      Project[]
  sections      Section[]
  subsections   Subsection[]
  Membership    Membership[]
  Subsubsection Subsubsection[]
}

enum UserRoleEnum {
  USER
  ADMIN
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Project {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  //
  slug            String   @unique
  title           String
  shortTitle      String
  description     String?
  logoSrc         String?
  partnerLogoSrcs String[]

  manager   User @relation(fields: [managerId], references: [id])
  managerId Int

  sections        Section[]
  calendarEntries CalendarEntry[]
  contacts        Contact[]
  files           File[]
  Membership      Membership[]
}

model Membership {
  id Int @id @default(autoincrement())

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([projectId, userId])
}

model CalendarEntry {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  //
  title        String
  startAt      DateTime
  locationName String?
  locationUrl  String?
  description  String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model Contact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  firstName String?
  lastName  String
  email     String
  note      String?
  phone     String?
  role      String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  @@unique([projectId, email])
}

enum LabelPositionEnum {
  top
  topRight
  right
  bottomRight
  bottom
  bottomLeft
  left
  topLeft
}

model Section {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  slug        String
  index       Int
  length      String?
  title       String
  subTitle    String?
  description String?
  start       String
  end         String
  labelPos    LabelPositionEnum @default(top)

  manager   User    @relation(fields: [managerId], references: [id])
  managerId Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  subsections Subsection[]

  @@unique([projectId, slug])
  @@unique([projectId, index])
}

model Subsection {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  slug        String
  title       String
  description String?
  geometry    Json
  start       String
  end         String
  labelPos    LabelPositionEnum @default(top)

  manager   User    @relation(fields: [managerId], references: [id])
  managerId Int
  section   Section @relation(fields: [sectionId], references: [id])
  sectionId Int

  subsubsections  Subsubsection[]
  stakeholdernote Stakeholdernote[]

  @@unique([sectionId, slug])
}

model Subsubsection {
  id           Int                   @id @default(autoincrement())
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  //
  slug         String
  title        String
  type         SubsubsectionTypeEnum @default(ROUTE) // Führungform
  geometry     Json
  labelPos     LabelPositionEnum     @default(top)
  task         String // Maßnahmentyp
  length       Float? // Kilometer
  width        Float? // Meter
  costEstimate Float? // Euro
  description  String? // Anmerkungen
  //
  manager      User                  @relation(fields: [managerId], references: [id])
  managerId    Int
  //
  subsection   Subsection            @relation(fields: [subsectionId], references: [id])
  subsectionId Int

  @@unique([subsectionId, slug])
}

enum SubsubsectionTypeEnum {
  ROUTE // Regelführung Strecke RF
  AREA // Sonderführung Punkt (Bereich) SF
}

model Stakeholdernote {
  id           Int                       @id @default(autoincrement())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  title        String
  status       StakeholdernoteStatusEnum @default(PENDING)
  statusText   String?
  section      Subsection                @relation(fields: [subsectionId], references: [id])
  subsectionId Int
}

enum StakeholdernoteStatusEnum {
  PENDING
  IN_PROGRESS
  DONE
  IRRELEVANT
}

model File {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  externalUrl String
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
}

model SurveySession {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  email     String?
  responses SurveyResponse[]
}

model SurveyResponse {
  id              Int           @id @default(autoincrement())
  surveySession   SurveySession @relation(fields: [surveySessionId], references: [id])
  surveySessionId Int
  surveyId        Int
  data            String
}
